<?php

use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\alqueria_config\Controller\AlqueriaConfigController;
use Drupal\node\Entity\Node;
use Drupal\Core\Path;
use Drupal\taxonomy\Entity\Term;
use Drupal\webform\Entity\WebformSubmission;
use Symfony\Component\HttpFoundation\RedirectResponse;

function alqueria_config_preprocess(&$variables) {
  $variables['front'] = 0;
  $variables['ty_page'] = 0;
  if (isset($_GET['mode']) && $_GET['mode'] === "front") {
    $variables['front'] = 1;
  }
  if (isset($_GET['send']) && $_GET['send'] === "thanks") {
    $variables['ty_page'] = 1;
  }
  $variables['frontpage'] = Drupal::service('path.matcher')->isFrontPage();
  $variables['#cache']['contexts'][] = 'url';
}

function alqueria_config_preprocess_html(&$variables) {
  $variables['#attached']['drupalSettings']['language'] = Drupal::languageManager()
    ->getCurrentLanguage()
    ->getId();
}

function alqueria_config_theme($existing, $type, $theme, $path) {
  return [
    'buscadorGeneral' => [
      'variables' => [
        'items' => "",
        'limit' => "",
        'query' => "",
        'results' => "",
        'count' => "",
      ],
    ],
  ];
}

function alqueria_config_preprocess_pager(&$variables) {
  $node = Drupal::service('current_route_match')->getParameter('node');
  $variables['comment'] = "";
  if (!is_null($node) && (in_array($node->bundle(), [
      "receta",
      "blog_nutricion",
    ]))) {
    $variables['comment'] = "#comments";
  }

}

/**
 * @param $form
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 * @param $form_id
 *
 * @return void
 */
function alqueria_config_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  if ($form_id === "node_receta_form") {
    $roles = Drupal::currentUser()->getRoles();
    if (!in_array("administrator", $roles, TRUE)) {
      foreach ($form as $key => $value) {
        if (isset($value['widget'][0]['value']['#title_display'])) {
          $form[$key]['widget'][0]['value']['#title_display'] = "invisible";
        }
        elseif (isset($value['widget'][0])) {
          $form[$key]['widget'][0]['#title_display'] = "invisible";
        }
      }
      foreach (array_keys($form['actions']) as $action) {
        if ($action !== 'preview' && isset($form['actions'][$action]['#type']) && $form['actions'][$action]['#type'] === 'submit') {
          $form['actions'][$action]['#submit'][] = 'redirect_node';
        }
      }
    }
  }
}

/**
 * @param $form
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 *
 * @return void
 */
function redirect_node($form, FormStateInterface $form_state) {
  $url = Drupal::config('alqueriaUsers.settings')->get('ty_sube_tu_receta');
  $response = new RedirectResponse($url);
  $response->send();
}

// se comenta porque la calificación se debe hacer cuando se apruebe el comentario
// function alqueria_config_comment_insert(Drupal\Core\Entity\EntityInterface $entity) {
//   if ($entity->bundle() == 'comment' && $entity->get('entity_type')->value == 'node') {
//     $node = Node::load($entity->get('entity_id')->target_id);
//     $calificacion = $entity->get('field_calificacion')->isEmpty() ? 1: $entity->get('field_calificacion')->getValue()[0]['value'];
//     $comentarios = $node->get('field_cantidad_comentarios')->isEmpty() ? 0 : $node->get('field_cantidad_comentarios')->getValue()[0]['value'];
//     $puntosCalificacion= $node->get('field_puntos_calificacion')->isEmpty() ? 0 : $node->get('field_puntos_calificacion')->getValue()[0]['value'];
//     $calificacionFinal= $puntosCalificacion + $calificacion;
//     $node->set('field_cantidad_comentarios', $comentarios+1);
//     $node->set('field_puntos_calificacion', $calificacionFinal);
//     $node->set('field_calificacion',round($calificacionFinal/($comentarios+1)));
//     $node->save();
//   }
// }

/**
 * @param \Drupal\Core\Entity\EntityInterface $entity
 *
 * @return void
 * @throws \Drupal\Core\Entity\EntityStorageException
 */
function alqueria_config_comment_update(Drupal\Core\Entity\EntityInterface $entity) {
  $original = $entity->original->isPublished();
  $nuevo = $entity->isPublished();

  /** @var Node $node */
  $node = Node::load($entity->get('entity_id')->target_id);
  $calificacion = $entity->get('field_calificacion')
    ->isEmpty() ? 1 : $entity->get('field_calificacion')
    ->getValue()[0]['value'];
  $comentarios = $node->get('field_comentarios')
    ->getValue()[0]['comment_count'];
  $puntosCalificacion = $node->get('field_puntos_calificacion')
    ->isEmpty() ? 0 : $node->get('field_puntos_calificacion')
    ->getValue()[0]['value'];
  $calificacionFinal = "fail"; //se usa una palabra porque se puede dar el caso dónde el resultado sea 0
  if (!$original && $nuevo) {
    $calificacionFinal = $puntosCalificacion + $calificacion;
  }
  elseif ($original && !$nuevo) {
    $calificacionFinal = $puntosCalificacion - $calificacion;
  }
  if ($calificacionFinal !== "fail") {
    $node->set('field_puntos_calificacion', $calificacionFinal);
    $node->set('field_calificacion', round($calificacionFinal / ($comentarios)));
    $node->save();
  }
}

/**
 * @param \Drupal\Core\Entity\EntityInterface $entity
 *
 * @return void
 * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
 * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
 * @throws \GuzzleHttp\Exception\GuzzleException
 * @throws \JsonException
 */
function alqueria_config_entity_insert(Drupal\Core\Entity\EntityInterface $entity) {
  if ($entity->getEntityTypeId() === 'webform_submission') {
    /** @var WebformSubmission $webform_submission */
    $webform_submission = WebformSubmission::load($entity->id());
    $data = $webform_submission->getData();

    /*Emblue Data*/
    if (isset($data['emblue_url'])) {
      $endpoint = $data['emblue_url'];
      $eventName = $data['emblue_event'];
      //$fields = $data['emblue_fields'];
      $fields = explode(";", $data['emblue_fields']);
      $fieldsEmblue = [];
      foreach ($fields as $value) {
        if (strpos($value, ':') !== FALSE) {
          $field = explode(":", $value);
          $fieldData = $field[0];
          $fieldData = explode('|', $fieldData);
          $fieldType = $field[1];
          switch ($fieldType) {
            case 'email':
              $email = $data[$fieldData[0]];
              $fieldsEmblue[$fieldData[1]] = $data[$fieldData[0]];
              break;

            case 'tax':
              $term = Drupal::entityManager()
                ->getStorage('taxonomy_term')
                ->loadByProperties(['tid' => $data[$fieldData[0]]]);
              $term = reset($term);
              $fieldsEmblue[$fieldData[1]] = $term->label();
              break;

            case 'tel':
              $tel = $data[$fieldData[0]];
              $fieldsEmblue[$fieldData[1]] = "57" . $tel;
              break;

            case 'multiple':
              if (isset($data[$fieldData[0]])) {
                $opc = $data[$fieldData[0]];
                $multiple_data = "";

                foreach ($opc as $i => $iValue) {
                  $multiple_data .= $iValue;
                  if ($i !== (count($opc) - 1)) {
                    $multiple_data .= ',';
                  }
                }
                $fieldsEmblue[$fieldData[1]] = $multiple_data;
              }
              else {
                $fieldsEmblue[$fieldData[1]] = "";
              }
              break;
            default:
              break;
          }
        }
        else {
          $fieldData = explode('|', $value);
          if (isset($data[$fieldData[0]])) {
            $fieldsEmblue[$fieldData[1]] = $data[$fieldData[0]];
          }
          else {
            $fieldsEmblue[$fieldData[1]] = "";
          }
        }
      }
      $fieldsEmblue['origen_formulario'] = Drupal::request()->getHost();
      $fields = [
        'email' => $email,
        'eventName' => $eventName,
        'attributes' => $fieldsEmblue,
      ];
      $client = Drupal::httpClient();
      $options = [
        'headers' => [
          'Authorization' => 'Basic ' . base64_encode(Drupal::config('alqueriaUsers.settings')
              ->get('apikey')),
          'Content-Type' => 'application/json',
        ],
      ];
      $options['body'] = json_encode($fields, JSON_THROW_ON_ERROR);
      $response = $client->request('POST', $endpoint, $options);
      Drupal::logger('emblue_data')
        ->notice('enviado:' . json_encode($fields, JSON_THROW_ON_ERROR) . " || respuesta: " . $response->getBody());
    }
  }
}

function alqueria_config_form_views_exposed_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  if ($form['#id'] === 'views-exposed-form-favoritos-usuario-block-1') {
    $form['type']['#options'] = [
      "All" => 'Todos',
      "receta" => "Recetas",
      "blog_nutricion" => "Nutrición",
    ];
  }
}
